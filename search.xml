<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[My Configurations Under Ubuntu]]></title>
    <url>%2F2019%2F03%2F20%2FMy-configurations-under-Ubuntu%2F</url>
    <content type="text"><![CDATA[I note down here my configurations in order to quick set up my environment on a new machine. shellpowerline💡root is another user, need extra configurations. 1.install it. 1pip install --user git+git://github.com/powerline/powerline 2.run pip show powerline-status to show where the package is. 3.add its launch script to ~/.bashrc. 💡 e.g. the location of the script on my computer is ~/.local/lib/python3.7/site-packages/powerline/bindings/bash/powerline.sh vimgoto my vimrc. OneDrivethere are a few onedrive tools on Linux platform, but most of them, for example onedrive-d just support personal onedrive account, onedrive 365 as well as onedrive business are not supported. Someone recommended GoodSync, unfortunately I didn’t figure out how on earth do I use it 😢. Good news is I find a thing called onedrive (what a confusing name), which support personal account and onedrive 365 and even onedrive business! goto abraunegg/onedrive for instructions. the guide is clear enough! 👍 workspaceisolated workspaces🔗related question on Stack Exchange 1.install dconf-editor 1sudo apt install dconf-editor 2.open the app and Navigate to org &gt; gnome &gt; shell &gt; extensions &gt; dash-to-dock and check isolate-workspaces document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Configuration</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[CAN Bus With RaspberryPi]]></title>
    <url>%2F2019%2F01%2F16%2FCAN-Bus-with-RaspberryPi%2F</url>
    <content type="text"><![CDATA[Language: English 中文 Recently I am working on A Formula E car, trying to do something with data in the car’s CAN Bus. The very basic idea is first transmit data into a RaspberryPi. Reference: https://www.cowfishstudios.com/blog/canned-pi-part1 https://zhuanlan.zhihu.com/p/30657287 https://zhuanlan.zhihu.com/p/30247549 https://www.gridconnect.com/collections/can-pc-interfaces https://www.raspberrypi.org/forums/viewtopic.php?t=141052 https://www.raspberrypi.org/forums/viewtopic.php?p=524910 https://www.raspberrypi.org/forums/viewtopic.php?f=44&amp;t=7027 https://www.raspberrypi.org/forums/viewtopic.php?p=444938 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Communication</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Configure C/C++ Environment in VSCode]]></title>
    <url>%2F2018%2F12%2F29%2FConfigure-C-C-environment-in-VSCode%2F</url>
    <content type="text"><![CDATA[Language: English 中文 Here is a tutorial for configuration of VSCode to run C/C++ programs on Windows. Mainly I wrote it for my C/C++ Extension Pack 🎉 Actually how can we run C/C++ code in VSCode has been described clearly in the C++ part of VSCode document, here is just my personal understanding of this work and I suppose my description is more friendly with beginners 😄 Requirements Compiler Installation Add to Path Test VSCode Extensions Configuration files IntelliSense configuration Compilation configuration In total Debugger configuration Program to debug Debugger path and options Compile before launch In total Enjoy RequirementsVSCode itself is just a editor, can not do things like compilation, even we add VSCode’s official extension for C/C++ called cpptools, it does not install a compiler for us. CompilerSo undoubtedly, our first step is to install a compiler. There are a few choices, the one recommended by VSCode’s document on Windows platform is MinGW-w64. ⚠ we have to notice that there is another thing called MinGW which is different from MinGW-w64. Although MinGW also works, but this project hasn’t update for a while and we need more steps to install it. In addition, there should be a reason that VSCode document does not recommend it but MinGW-w64. Installationafter downloaded the installer we are good to start installation, there are mainly two options we have to change and leave the other options as the default: on the first page of the install wizard you are asked to choose your Architecture, set it to x86_64 if your computer is 64-bit, set it to i386 if your computer is 32-bit. you can install it to where ever you want but make sure you can find it later, since we have to add it to Path manually after the installation. Add to PathAfter the installation we have to add our compiler to the Path so that it can be called from the command line / powershell. (this is actually how VSCode calls the compiler) But what path to add? The path add to the Path is actually the folder path of the executable file of the application we want to call. For example I installed MinGW-w64 to D:\Softwares\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0, then I should add D:\Softwares\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin to the Path. You can see the two applications we are going to call, gcc.exe and gdb.exe are exactly there ✌ 🔗 If you are no sure how to add something to the Path, this may helps you 👍 TestNow! We can test if we successfully add the compiler to the Path by typing gcc in the cmd. ✔ What we should see is: 123C:\Users\LeoJh&gt;gccgcc: fatal error: no input filescompilation terminated. ❌ What we should not see is: 12`gcc`is not recognized as an internal or external command,operable program or batch file. Which means you may have added wrong path to Path. VSCode ExtensionsWe are not far from completion as we have successfully get our compiler ready :smile: Actually we are now able to develop C/C++ code! (Although it may seems hardcore) Don’t believe? Open cmd and get into te folder where you have a piece of C/C++ code to test, type gcc test.c or gcc test.cpp and you will find a a.exe is generated in the current folder. This is exactly the executable file we just compiled! But this does not feels good, so we use extensions in VSCode to improve the situation. I recommend my C/C++ Extension Pack since it includes only a few but really useful tools. Configuration filesIn some tutorials it is said that we have to generate c_cpp_properties.json, tasks.json, launch.json three files, but the situation has changed! :tada: c_cpp_properties.json has been totally replaced by settings in settings.json. The advantage is that we can set different values for different workspace. Also, you will later see that configuring tasks.json and launch.json becomes REALLY easy too! :link: click here to learn more about what has been replaced by settings.json in c_cpp_properties.json. :link: click here to learn more about what could have been set in c_cpp_properties.json. ⚠ the following configuration uses my settings as an example. IntelliSense configurationAs mentioned above, we are able to develop C/C++ without VSCode, so, from my point of view, IntelliSense which provides us with smart suggestions is a very important part of language support for C/C++ in VSCode. We could configure the IntelliSense by editing settings.json. The most useful ones are: 123456789"C_Cpp.autocomplete": "Default","C_Cpp.clang_format_style": "{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }","C_Cpp.clang_format_fallbackStyle": "{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4 }","C_Cpp.default.compilerPath": "D:\\Softwares\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin\\gcc.exe","C_Cpp.default.cStandard": "c99","C_Cpp.default.cppStandard": "c++11","C_Cpp.default.intelliSenseMode": "gcc-x64","C_Cpp.intelliSenseEngine": "Default","C_Cpp.errorSquiggles": "Enabled", the segments C_Cpp.clang_format_style and C_Cpp.clang_format_fallbackStyle specify the format style of how VSC format C/C++ code. The above value makes a code style similar to C/C++ code style in Visual Studio. If you prefer Google Style, the following piece is what you need. 12"C_Cpp.clang_format_style": "{BasedOnStyleStyle: Google, IndentWidth: 4}","C_Cpp.clang_format_fallbackStyle": "{BasedOnStyleStyle: Google, IndentWidth: 4}", 🌟 In latest VSC, things becomes REALLY easy. You can learn how to generate tasks.json and launch.json simply by this gif 👇 💡 This gif is recorded under Linux system (Ubuntu). Following are some explanations of tasks.json and launch.json. Compilation configurationThen we generate the tasks.json to help us compile the code. ✔️ tasks.json and launch.json are prepared for specific piece of code as different programs may require different configurations. But if most of your code shares the same configuration, you can put your tasks.json and launch.json in the parent folder of all the programs. If a few programs among them require specific configuration, you can generate another tasks.json and launch.json in its folder. After you have generate a tasks.json following the instruction in VSCode’s document, add the following task to the tasks list: 1234567891011121314151617{ "label": "Compile", "type": "shell", "command": "gcc", "args": [ "${file}", "-o", "${fileDirname}/${fileBasenameNoExtension}.exe", "-g", "-Wall", "-std=c++17" ], "group": { "kind": "build", "isDefault": true }} label is the name of this task, it will be used later. From this we can see that every time we call this task it actually inputs the following command to shell: 1gcc ${file} -o ${fileDirname}/${fileBasenameNoExtension}.exe -g -Wall -std=c++17 Things like ${file}, ${fileDirname} are actually variables defined by VSCode. And the -o option allows us to specify the name of output file. The settings about group allow us to call this task by shortcut Ctrl+shift+B. check this for more details. In totalSo in total my tasks.json looks like this: 123456789101112131415161718192021222324{ // See https://go.microsoft.com/fwlink/?LinkId=733558 // for the documentation about the tasks.json format "version": "2.0.0", "tasks": [ { "label": "Compile", "type": "shell", "command": "gcc", "args": [ "${file}", "-o", "${fileDirname}/${fileBasenameNoExtension}.exe", "-g", "-Wall", "-std=c++17" ], "group": { "kind": "build", "isDefault": true } } ]} Debugger configurationThe last thing we need is launch.json. This is actually a easy task since VSCode provide us with a lot of templates, (normally I use the template (gdb) Launch) only a few options need modification: Program to debug1"program": "${workspaceFolder}/a.exe" program means the program we want to debug. If not specified, the name of the output file will be a.exe, so the program name is the above one. But if you have specified the name of output file just like what I did in the tasks.json, you should use this: 1"program": "${workspaceFolder}/${fileBasenameNoExtension}.exe" Debugger path and optionsSet your debugger path simply by this: 1"miDebuggerPath": "gdb.exe" And we can easliy find out that gdb will output something useless first every time evoked. We could use option -q to disable this: 1"miDebuggerArgs": "-q" Compile before launchIf you always forget to compile the modified code before debugging, VSCode provides a very useful option: preLaunchTask. We can specific this task to our task named Compile, so our code will be compiled first every time we start debugging 👍 1"preLaunchTask": "Compile" In totalSo in total my launch.json look like this: 123456789101112131415161718192021222324252627282930{ // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 "version": "0.2.0", "configurations": [ { "name": "(gdb) Launch", "type": "cppdbg", "request": "launch", "program": "${workspaceFolder}/${fileBasenameNoExtension}.exe", "args": [], "stopAtEntry": false, "cwd": "${workspaceFolder}", "environment": [], "externalConsole": true, "MIMode": "gdb", "miDebuggerPath": "gdb.exe", "miDebuggerArgs": "-q", "setupCommands": [ { "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": true } ], "preLaunchTask": "Compile" } ]} EnjoyCongratulations! 🎉 You are now able to develop C/C++ code with VSCode and hope you enjoy it! document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[When VSCode Becomes a Lifestyle]]></title>
    <url>%2F2018%2F12%2F25%2FWhen-VSCode-Becomes-A-Lifestyle%2F</url>
    <content type="text"><![CDATA[Language: English 中文 IntelliSense for CSS class names in HTMLrewrapARMArduinoBetter CommentsMarkdown All in OneThis extension includes nearly everything you need for Markdown, the only extra stuff you need are Reflow Markdown and Markdown Emoji. Markdown Preview EnhancedThis extension seems really powerful that it can do nearly everything you can imagine of about Markdown. Unfortunately it seems that it don’t support emojis by itself in preview tab either. I have not tried this extension since I have got Markdown All in One Reflow MarkdownThis extension help you to do word-wrap very smartly by simply press Alt+Q 😍😍😍I LOVE THIS ONE! Markdown EmojiMarkdown Preview Mermaid Support document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[About My Custom Settings of My Next Theme Blog and Problem Killing]]></title>
    <url>%2F2018%2F12%2F24%2FAbout-My-Custom-Settings-of-My-Next-Theme-Blog-and-Problem-Killing%2F</url>
    <content type="text"><![CDATA[Language: English 中文 This blog site is powered by Hexo, the theme is NexT, the scheme is Pisces. After I started building my blog with Hexo, I found that actually there are some more Static Site Generators which are considered better than Hexo. You can find a ranking list of the Static Site Generators here. (But if you have already get started with Hexo, it is O.K. At least I think it is good enough) ⚠ the generator named Next in the list is a different thing from the theme of Hexo I use. Here I want to share about the problems I meet and my custom settings. Problems I metGitHub Pages says I am using a unsupported themeThis problem is very likely to occur if you simply commit your whole Hexo instance to your master branch. In fact, only a few themes are supported by GitHub Pages and NexT or any Hexo theme is not included 🤦♂But here is a little trick: the files are rendered at your desktop, simple HTML pages are uploaded to the master branch as the source code of your site. In this way, anytheme can be applied to your blog😄 Therefore, you can not simply commit your Hexo instance to the master branch, what I did is to publish a new branch Root to store my Hexo instance and use the hexo-deployer-git extension to deploy my site to the master branch. :warning:your GitHub Pages can only published from the master branch if your repository is named username.github.io If you haven’t installed this plugin, use the following command at the root of your hexo instance. 1npm install hexo-deployer-git --save check here for the configuration. Cannot commit theme/next to githubHere is the issue: #932 #328 Therefore you cannot backup your theme simply committing it to github since it is a subproject. Although a cool solution is provided in #328, it cannot solve my problem since I did further customization. But I did not try the solution fork+submodule mentioned in #932. I simply deleted files declaring its identity of a subproject so the theme folder becomes totally a part of my hexo instance.🤦♂ You just need to left these files: 1234567.├──languages├──layout├──scripts├──source├──_config.yml└──package.json You can also change the theme’s name from next to whatever else, for example LeoJhonSong:smile:. According to Hexo, you have to then modify the theme setting in your site’s _config.yml, assigning the name of your theme folder to it. Pages do not change after modificationthe issue could be separated in to two situations. The modification works on local serverthe reason may be: sometimes your modification will be ignored if you do not run hexo clean to delete the cache file (db.json) your setting is not first priority in CSS in all probability, the value is overwritten somewhere else check if the attributes you changed is valid by Chrome DevTools. The invalid attributes will look like this: color: #fff you can specific the class name of the item to rise the priority of yuor custom attribute. another way is to use !important to force priority to rise. for example, color: #fff !important. It is often not recommanded since it ruins existing CSS and may cause difficulty when debugging. In addition, there is still a low risk it is not raised to first priority 😅 as examples are given here The modification even does not work on local server🤦♂The reason could be: your browser uses the cache data of the GitHub Page instead of reloading it there is grammar mistakes in your modification The solution could be: Ctrl + F5 or Ctrl + Fn + F5 to force the browser to refresh the page check the generation information to see if there is an error or run hexo s to run the site locally to see if something goes wrong Cannot show emojiadd hexo-filter-github-emojis and then you can use Emojis as you want just like me.✌ if you want to type a emoji but you have no idea what its shortcut is, you could go to emojipedia for help. Will line feed whenever there is a return in the markdown fileActually this issue is mentioned in github. this happened to me because I uninstalled hexo-renderer-marked and installed hexo-renderer-markdown-it since the markdown-it markdown parser has plenty of plugins🤦♂. Sitemap errorGoogle Search Console may tells you that there is errors in your site if you did not changed your site’s url from http://yoursite.com to your own root url in your site’s _config.yml… Error word-countIt had been mentioned here. I enabled word count provided by Hexo but the count is definitely larger than it should be. But that is not a problem, it can be seen as a decoration 🙈 My custom settingsI am proud of some settings because I tried and achieved it by myself, despite from simply copying others’ code. 😝 Commit site to GoogleUnfortunately, Baidu crawler is blocked by GitHub because Baidu has been used to attack GitHub. Actually poor Baidu did not mean to do this… But to be honest, Baidu is not a lovely search engine since it puts plenty of ads in its search results🙄. So I won’t bother solving the issue that Baidu con not find my blog. Besides, this blog is mainly wrote for myself✌. install hexo-generator-sitemap go to Google Search Console and add your site.verify it by HTML tag. There you get a &lt;meta&gt; tag like this: 1&lt;meta name="google-site-verification" content="blablablablablabla" /&gt; the content is your verification code. add following code to your site’s _config.yml: 1234sitemap: path: sitemap.xmlgoogle_site_verification: your code run the following code: 1hexo d -g now your site should have be added the verification tag. go back to google search console and commit your sitemap. Your sitemap should be named sitemap.xml. DONE! Multi-Language This part! Guys, this is my proud since I worked out my own solution. My work is based on this and this It is described very clearly in Keep Velocity High‘s post that a multilingual blog implemented with current tools is not good enough. He’s idea of running two isolated blog is a good try and thanks to his great work I don’t have to do those works again. But just as the second post pointed out, it becomes too hassle that we have to run two independent site if we just want our site could be shown in more than one language. As a individual blogger I do not have that much time to maintain my blog. I have to run three sites, if I want it can be shown in Chinese, English and Japanese! In addition, if we want to change the style of the blog, we have to repeat the work for each language😨. The solution mentioned in the second post is also very smart, but there is still some problems. His idea of deploy two site to one repository is impossible since a repository can only have one home page.In addition, you need a repository named zh-CN if you want your chinese site’s root url is https://yourname.github.io/zh-CN it definitely waste a lot of time if we have to copy the markdown files to the source folder every time we generate the public folder. As we can see, most multilingual site will give each site a different root url. Therefore, I decided to use https://leojhonsong.github.io to be the home of my english site and https://leojhonsong.github.io/zh-CN for Chinese site. That is to say, I need a repository called leojhonsong.github.io and a repository called zh-CN for my blog. Things are simple until now, but here is the trick: since hexo allows us to add alternate config, we use the site’s _config.yml for settings of the english site as well as the basic settings of the blog and create _config.zh-CN.yml for settings of Chinese site that differs from english site to override settings in _config.yml. There, we are able to set different source folder path, public folder path for each language and even different repository to deploy the site😄 The following code are my settings. in _config.yml: 12345678910111213141516171819# Sitelanguage: en# URLurl: https://leojhonsong.github.io/root: /# Directorysource_dir: source/enpublic_dir: public/en# Extensionstheme: LeoJhonSong# Deploymentdeploy: type: git repo: git@github.com:LeoJhonSong/LeoJhonSong.github.io.git branch: master in _config.zh-CN.yml: 12345678910111213141516# Sitelanguage: zh-CN# URLurl: https://leojhonsong.github.io/zh-CNroot: /zh-CN# Directorysource_dir: source/zh-CNpublic_dir: public/zh-CN# Deploymentdeploy: type: git repo: git@github.com:LeoJhonSong/zh-CN.git branch: master Then after generation your directory should look like this: 12345678910111213141516171819.├──.deploy_git├──node_modules├──public│ ├─en│ └─zh-CN├──scaffolds├──source│ ├─en│ └─zh-CN├──themes├──_config.yml├──_config.zh-CN.yml├──_multiconfig.yml├──db.json├──debug.log├──LICENSE├──package-lock.json└──package.json By this method, you can easily set up a multilingual blog! :warning: notice that db.json is the cache file for generation, that is to say, if you generate the files for Chinese site right after generating files for English site, the English files will be mixed into public/zh-CN, which is annoying. So you should run hexo clean to delete db.json every time before generating files for different language. We can also write a batch script and python script to shorten the commands. put a.bat in the root directory: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677@echo off:: g for generate, d for deploy, e for English, c for Chinese, nc for new:: Chinese post, ne for new English post, n for new post of all languageif "%1"=="" goto generateDeployAllif "%1"=="g" goto generateAllif "%1"=="d" goto deployAllif "%1"=="e" goto englishif "%1"=="c" goto chineseif "%1"=="ne" hexo new %2if "%1"=="nc" hexo new %2 --config _config.yml,_config.zh-CN.ymlif "%1"=="na" hexo new %2 &amp;&amp; hexo new %3 --config _config.yml,_config.zh-CN.yml &amp;&amp; multi-language.py %2 %3goto end:generateDeployAllhexo clean &amp;&amp; hexo d -g &amp;&amp; hexo clean --config _config.yml,_config.zh-CN.yml &amp;&amp; hexo d -g --config _config.yml,_config.zh-CN.ymlgoto end:generateAllhexo clean &amp;&amp; hexo g &amp;&amp; hexo clean --config _config.yml,_config.zh-CN.yml &amp;&amp; hexo g --config _config.yml,_config.zh-CN.ymlgoto end:deployAllhexo d &amp;&amp; hexo d --config _config.yml,_config.zh-CN.ymlhexogoto end:englishif "%2"=="" goto generateDeployEnglishif "%2"=="g" goto generateEnglishif "%2"=="d" goto deployEnglishif "%2"=="s" goto serverEnglishgoto end:generateDeployEnglishhexo clean &amp;&amp; hexo d -ggoto end:generateEnglishhexo clean &amp;&amp; hexo ggoto end:deployEnglishhexo dgoto end:serverEnglishstart hexo serverstart http://localhost:4000goto end:chineseif "%2"=="" goto generateDeployChineseif "%2"=="g" goto generateChineseif "%2"=="d" goto deployChineseif "%2"=="s" goto serverChinesegoto end:generateDeployChinesehexo clean --config _config.yml,_config.zh-CN.yml &amp;&amp; hexo d -g --config _config.yml,_config.zh-CN.ymlgoto end:generateChinesehexo clean --config _config.yml,_config.zh-CN.yml &amp;&amp; hexo g --config _config.yml,_config.zh-CN.ymlgoto end:deployChinesehexo d --config _config.yml,_config.zh-CN.ymlgoto end:serverChinesestart http://localhost:4000start hexo server --config _config.yml,_config.zh-CN.ymlgoto end:end put multi-language.py in the root directory: 123456789101112131415161718192021222324252627# -*- coding: UTF-8 -*-import sysimport redef filter(filename): filename = filename.replace(' ', '-') filename = filename = re.sub(r'[+/?#$%]', "", filename) return filenameenglishName = filter(sys.argv[1])chineseName = filter(sys.argv[2])englishFile = 'source/en/_posts/' + englishName + '.md'chineseFile = 'source/zh-CN/_posts/' + chineseName + '.md'Files = [englishFile, chineseFile]for filepath in Files: with open(filepath, 'a') as post: post.write("\n") post.write("&lt;div align='right'&gt;Language:\n") post.write("\t&lt;a href='{{ location.host }}/"+englishName+"'&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt;\n") post.write("\t&lt;a href='{{ location.host }}/zh-CN/"+chineseName.decode('gbk').encode('utf-8')+"'&gt;&lt;code&gt;中文&lt;/code&gt;&lt;/a&gt;\n") post.write("&lt;/div&gt;") post.write("\n") These will make things much easier. You just need to put these two file in the root of your hexo instance and you are good to go. %1, %2 in the code are the parameters passed to the batch. For example, you can type a c g in cmd in the root of your hexo instance to generate the Chinese files. a is te name of my batch file as I named it a.bat but of course you can change it to want ever you want. By the way, the file name is also a parameter passed to the batch file, %0. c is the second parameter (%1) passed to the batch and g is %2. It is interesting that the parameter’s value could be null, that is to say, if you simply type a, the English files will be generated and deployed then Chinese files will be generated and deployed. The commands a ne, a nc, a na are used to generate new post.But the best part is that the command a na will call the multi-language.py to write HTML code to link the Chinese post and the corresponding English post. For example, if you want to new a English post named Hello World and its Chinese version 你好世界, the command should be a na 'Hello World' '你好世界' Categories, About pageReference here Search install the dependencies hexo-generator-searchdb and hexo-generator-search by: 12npm install hexo-generator-search --savenpm install hexo-generator-searchdb --save configure settings for hexo-generator-search in site‘s _config.yml: 12345search: path: search.xml field: post format: html limit: 10000 configure settings for hexo-generator-searchdb in theme‘s _config.yml: 1234local_search: enable: true trigger: auto top_n_per_article: 1 Better response for mobile devicesIn themes/next/source/css/_custom/custom.styl: 12345678910111213@media (max-width: 425px){ .site-title { font-size: 6vw; } .content-wrap { padding: 10px !important; }}@media (max-width: 767px){ .posts-expand { margin: 0 0px; }} Custom colors To customize the background colors of your site, I recommend this site to you as it provides a lot of cool colors. Things could be quite simply as most colors can be reset using variables in themes/next/css/_variables/base.styl and themes/next/css/_variables/YourScheme.styl. You can preview your custom settings utilizing developer tools of your browser. (Here is how we do this in Chrome DevTools.) After decided your custom settings, you reassign the variables which had been defined in the two yml files mentioned above in themes/next/css/_variables/custom.styl. :warning: you have to notice that only if your reassignments are in themes/next/css/_variables/custom.styl will they take effect. They are invalid if they are put in themes/next/source/css/_custom/custom.styl. Similarly, any other setting not related to the variables should be written in themes/next/source/css/_custom/custom.styl. you could find my custom.styl at the end. Colorful icons for social links in sidebarAs I see it, the single color font icons used by NexT are a little bit dual. In addition, fontawsome does not have some icons I want. So I use icons from iconfont instead. This site even provides colorful font icons! in themes/next/layout/_macro/sidebar.swig: 1{% set sidebarIcon = '&lt;i class="fa fa-fw fa-' + link.split('||')[1] | trim | default('globe') + '"&gt;&lt;/i&gt;' %} comment out but not delete line 108(the line above) by replacing it with the following line, in case one day you want it back. Then we add a line to use font icons from iconfont. 12{# % set sidebarIcon = '&lt;i class="fa fa-fw fa-' + link.split('||')[1] | trim | default('globe') + '"&gt;&lt;/i&gt;' % #}{% set sidebarIcon = '&lt;svg class="icon" aria-hidden="true"&gt;&lt;use xlink:href="#' + link.split('||')[1] | trim + '"&gt;&lt;/use&gt;&lt;/svg&gt;' %} Then add a line after line 100 to import the source code of the icons: 1&lt;script src="https:{{ theme.social_icons.source }}"&gt;&lt;/script&gt; create a project in iconfont to collect icons you want to use in your blog. here is the tutorial of iconfont. You can log in with GitHub. After added icons you like to your project, choose quote as symbol and View the Online Link, copy it and put it in your theme’s_config.yml under the social_icons settings like this: 12345social_icons: enable: true icons_only: false transition: false source: //at.alicdn.com/t/font_980470_nj2qfdk05jb.js simply put the code of your icons after your social links in your theme’s _config.yml like this: 123456social: GitHub: https://github.com/LeoJhonSong || icon-github E-Mail: mailto:LeoJhon.Song@outlook.com || icon-OUTLOOK FB Page: https://www.facebook.com/jhon.leo.100 || icon-Facebook QQ: https://user.qzone.qq.com/719957017 || icon-QQ WakaTime: https://wakatime.com/@LeoJhonSong || icon-waka-time 😆 quite easy right? Visitor numberfind busuanzi_count in your theme’s _config.yml and enable it. Post word countReference can be found here Improved the arrangement of images in asset folderNow suppose there is a image wow.jpg in the asset folder of a post named Hello. We could to use ![wow](wow.jpg) to insert this image. But the annoying problem is that the image won’t show up in your markdown preview unless you use ![wow](Hello/wow.jpg). But… the image won’t show up on your server if Hello/wow.jpg is used🤦♂ This is because hexo will put the HTML page index.html of the post Hello and the image wow.jpg into the same folder Hello in public folder. So I modified following file to create a subfolder of the same name of the post in the folder where the post’s index.html is put. in node_modules/hexo/lib/models/post_asset.js 1return pathFn.join(post.path.replace(/\.html?$/, ''), this.slug); change line23 from ⬆ to ⬇ 1return pathFn.join(post.path.replace(/\.html?$/, ''), post.path.replace(/\.html?$/, ''), this.slug); Unfortunately, according to my test, the tag method to insert images provided by Hexo does not work as it supposed to anymore after modifying the post_asset.js🤦♂. Since I would use anything but the tags so this doesn’t bothers me😁. But if you want to improve this situation, I suppose you should modify node_modules\hexo\lib\plugins\tag\asset_img.js Valine comment system Search for Valine in your theme’s _config.yml then you just need to follow instructions here. My custom.stylAlthough as I mentioned here, some settings only take effet if is put in themes/next/source/css/_custom/custom.styl while some other should be put in themes/next/source/css/_variables/custom.styl, but it is a little bit annoying that I have to decide where do I put my settings. So I simply put all the settings in both styl custom.styl😆. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Custom styles.//------------------------------------------------------------------------------//better response for mobile devices//------------------------------------------------------------------------------@media (max-width: 425px){ .site-title { font-size: 6vw; } .content-wrap { padding: 10px !important; }}@media (max-width: 767px){ .posts-expand { margin: 0 0px; }}//------------------------------------------------------------------------------//custom colors//more colors here: http://nipponcolors.com///------------------------------------------------------------------------------$site-title-background = #828282$site-background = #828282$post-background = #828282$font-color = #eee$font-color-title = #FFFFFB$font-color-descript = #ddd$font-color-link = #ccc$font-color-menu = #bbc$font-color-hover = #fc6423//backgrounds color$body-bg-color = $site-background$brand-bg = $site-title-background.content-wrap { background: $site-background;}.post-block{ background: $post-background;}.sidebar-inner, .header-inner, .sidebar { background: rgba(255, 255, 255, 0); //opacity = 0}//fonts color$text-color = $font-color$site-author-name-color = $font-color$sidebar-nav-color = $font-color-descript$site-state-item-name-color = $font-color-descript$link-color = $font-color$link-hover-color = $font-color-link$link-decoration-hover-color = $font-color-hover$toc-link-color = $font-color$toc-link-hover-color = $font-color-link$toc-link-hover-border-color = $font-color-hover$site-subtitle-color = $font-color-descript$site-description-color = $font-color-descript.menu-item a { color: $font-color-menu;}.links-of-author-item a { color: $font-color;}a.post-title-link, .post-title { color: $font-color-title !important;}span.site-state-item-count{ color: $font-color-title;}.site-state-item { &amp;:hover { span.site-state-item-count { color: #ffd239; } }}blockquote { color: #abd !important;}// shadow for post blocks.post { margin-top: 0px; margin-bottom: 60px; padding: 0px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);}//------------------------------------------------------------------------------//colorful icons//------------------------------------------------------------------------------.icon { width: 1.5em !important; height: 1.5em !important; vertical-align: -0.4em; fill: currentColor; overflow: hidden;}//------------------------------------------------------------------------------//better organized post-block//------------------------------------------------------------------------------.post-block{ padding: 15px;}.post-eof{ display: none;}//------------------------------------------------------------------------------//disable image border//------------------------------------------------------------------------------img { border: none !important;} Thank you for reading! document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Web</category>
        <category>Configuration</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Language: English 中文 My first blog on my own site Hi, here is LeoJhon.Song’s first post! I suppose the only reason you are here is that you have nothing else to do. 😉 or because I shamefully wrote nothing else than this. OK. Finally, I build my own sweet little blog independent from annoy Chinese blog sites. It looks far much better don’t it? I plan to 1⃣ log my study experience (I found posting my schedule could force me doing things which I intend to do but not do at last because of laziness) and maybe some casual essay if I have the mood. It is really a good way to arrange your knowledge since there are too many small pieces of knowledge nowadays. Besides, a most important reason is that I want to 2⃣ share the cool things I found as I find it tastes the same with taking drug. I hope the future me won’t forget this. document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
</search>
